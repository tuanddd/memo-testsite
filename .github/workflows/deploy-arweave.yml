name: Deploy Markdown to Arweave

on: workflow_dispatch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history to determine changed files
          submodules: "recursive" # Checkout submodules recursively
          token: ${{ secrets.MEMO_PAT }}

      - name: Update submodules
        run: |
          git submodule update --init --recursive
          git submodule foreach --recursive 'git checkout master || git checkout main || true'
          git submodule foreach --recursive 'git pull origin $(git rev-parse --abbrev-ref HEAD) || true'

      - name: Get changed files
        id: changed-files
        run: |
          # Store the list of changed markdown files
          CHANGED_FILES=""

          # Function to get changed files in a repository or submodule
          get_changed_files() {
            local DIR=$1
            local PREFIX=$2
            
            pushd "$DIR" > /dev/null
            
            # Get changes in this repository/submodule
            local CHANGES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null | grep '\.md$' || echo "")
            
            # Prefix each change with the path
            for FILE in $CHANGES; do
              if [ -n "$PREFIX" ]; then
                CHANGED_FILES="$CHANGED_FILES $PREFIX/$FILE"
              else
                CHANGED_FILES="$CHANGED_FILES $FILE"
              fi
            done
            
            # Get list of submodules in this repository/submodule
            local SUBS=$(git submodule status | awk '{print $2}')
            
            # Process each submodule recursively
            for SUB in $SUBS; do
              if [ -d "$SUB" ]; then
                if [ -n "$PREFIX" ]; then
                  get_changed_files "$SUB" "$PREFIX/$SUB"
                else
                  get_changed_files "$SUB" "$SUB"
                fi
              fi
            done
            
            popd > /dev/null
          }

          # Start with the main repository (no prefix)
          get_changed_files "." ""

          # Trim and format the output
          CHANGED_FILES=$(echo "$CHANGED_FILES" | xargs)
          echo "Found changed markdown files: $CHANGED_FILES"
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install arweave gray-matter crypto js-yaml tsx

      - name: Create wallet file
        run: |
          echo '${{ secrets.ARWEAVE_WALLET_JSON }}' > wallet.json
          chmod 600 wallet.json

      - name: Process markdown files
        id: deploy
        if: steps.changed-files.outputs.files != ''
        run: |
          npx tsx deploy-arweave.ts ${{ steps.changed-files.outputs.files }}

      - name: Configure Git for submodule
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Commit changes in submodules recursively
        if: steps.deploy.outputs.deployments != ''
        run: |
          # Create a recursive script to handle nested submodules
          cat > commit-recursive.sh << 'EOF'
          #!/bin/bash

          process_repo() {
            local current_path=$1
            echo "Processing repository: $current_path"
            
            # Navigate to the repo
            cd "$current_path" || return
            
            # Get list of submodules
            local submodules=$(git submodule status | awk '{print $2}')
            
            # Process each submodule first (depth-first)
            for submodule in $submodules; do
              if [ -d "$submodule" ]; then
                process_repo "$current_path/$submodule"
              fi
            done
            
            # After processing all nested submodules, commit changes in current repo
            echo "Committing changes in: $current_path"
            git add -A
            if ! git diff --staged --quiet; then
              git commit -m "Add Arweave IDs to deployed markdown files"
              git push || echo "Failed to push in $current_path, continuing..."
            else
              echo "No changes to commit in $current_path"
            fi
            
            # Return to the parent directory
            cd - > /dev/null
          }

          # Start with the specified path (current directory if not specified)
          process_repo "${1:-.}"
          EOF

          # Make the script executable
          chmod +x commit-recursive.sh

          # Process each immediate submodule
          git submodule foreach '../commit-recursive.sh "$path"'

      - name: Commit changes in master repository
        if: steps.deploy.outputs.deployments != ''
        run: |
          git add -A
          git diff --staged --quiet || (git commit -m "Add Arweave IDs to deployed markdown files" && git push)

      - name: Update submodule references
        if: steps.deploy.outputs.deployments != ''
        run: |
          git add -A
          git diff --staged --quiet || (git commit -m "Update submodule references" && git push)

      - name: Display deployment results
        if: steps.deploy.outputs.deployments != ''
        run: |
          echo "Deployed files to Arweave:"
          echo '${{ steps.deploy.outputs.deployments }}' | jq -r '.[]| "File: \(.file)\nArweave ID: \(.id)\nURL: https://\(.id).arweave.net\n"'
